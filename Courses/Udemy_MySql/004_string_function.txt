=============================================STRING function=================

1.==============================CONCAT && CONCAT_Ws(returns NULL if any argument is NULL.)========================================

	eg. SELECT CONCAT('pi', 'ckle');
 
	eg. SELECT CONCAT(author_fname,' ', author_lname) AS author_name FROM books;
 
	eg. SELECT CONCAT_WS('-',title, author_fname, author_lname) FROM books;		# concat with seprator

	mysql> SELECT CONCAT('My', 'S', 'QL');
      	  -> 'MySQL'
	mysql> SELECT CONCAT('My', NULL, 'QL');
      	  -> NULL
	mysql> SELECT CONCAT(14.3);
      	  -> '14.3'

==============================SUBSTRING or SUBSTR(is a synonym for SUBSTRING)===============================================

mysql> SELECT SUBSTRING('Quadratically',5);
        -> 'ratically'		# return substring from given string starting from index 5 to last of string , indexing consider from 1, not from 0.
mysql> SELECT SUBSTRING('foobarbar' FROM 4);
        -> 'barbar'
mysql> SELECT SUBSTRING('Quadratically',5,6);
        -> 'ratica'		# it means return a substring of length 6 starting from index from 5.
mysql> SELECT SUBSTRING('Sakila', -3);
        -> 'ila'		# here as in python -ve indexng used here. from idx -3 till end of string or you can say -1.
mysql> SELECT SUBSTRING('Sakila', -5, 3);
        -> 'aki'		# return substring from idx -5 of length 3.
mysql> SELECT SUBSTRING('Sakila' FROM -4 FOR 2);
        -> 'ki'

=================================combining string functions==========================================================

	SELECT CONCAT
      (	
		SUBSTRING(title, 1, 10), '...' 
      ) 
	AS 'short title'
FROM books;


======================================REPLACE(str,from_str,to_str)===================================================

Returns the string str with all occurrences of the substring from_str in str replaced by the substring to_str. REPLACE() performs a case-sensitive match when searching for from_str.


 SELECT REPLACE('www.mysql.com', 'w', 'Ww');
        -> 'WwWwWw.mysql.com'


SELECT REPLACE('Hello World', 'Hell', '%$#@');		# --> %$#@o World
 
SELECT REPLACE('Hello World', 'l', '7');			# --> He77o World
 
SELECT REPLACE('Hello World', 'o', '0');
 
SELECT REPLACE('HellO World', 'o', '*');
 
SELECT REPLACE('cheese bread coffee milk', ' ', ' and ');
 
SELECT REPLACE(title, 'e ', '3') FROM books;
 
SELECT REPLACE(title, ' ', '-') FROM books;

=================================REVERSE( str)==================================================================

Returns the string str with the order of the characters reversed, or NULL if str is NULL.


SELECT REVERSE('abc');
        -> 'cba'

SELECT REVERSE('Hello World');
 
SELECT REVERSE('meow meow');
 
SELECT REVERSE(author_fname) FROM books;
 
SELECT CONCAT('woof', REVERSE('woof'));
 
SELECT CONCAT(author_fname, REVERSE(author_fname)) FROM books;

=======================================LENGTH(str)=======================================================


Returns the length of the string str, measured in bytes. A multybyte character counts as multiple bytes. This means that for a string containing five 2-byte characters, LENGTH() returns 10, whereas CHAR_LENGTH() returns 5. Returns NULL if str is NULL.

	eg. SELECT LENGTH('text');
        -> 4

=============================CHAR_LENGTH(str) or CHARACTER_LENGTH(str)=============================================

Returns the length of the string str, measured in code points. A multibyte character counts as a single code point. This means that, for a string containing two 3-byte characters, LENGTH() returns 6, whereas CHAR_LENGTH() returns 2, as shown here:

	eg. SET @dolphin:='海豚';
Query OK, 0 rows affected (0.01 sec)

mysql> SELECT LENGTH(@dolphin), CHAR_LENGTH(@dolphin);
+------------------+-----------------------+
| LENGTH(@dolphin) | CHAR_LENGTH(@dolphin) |
+------------------+-----------------------+
|                6 |                     2 |
+------------------+-----------------------+
1 row in set (0.00 sec)
# Since every character of @dolphin is of 3 byte.

==========================================LOWER(str) or LCASE(str)=============================================

Returns the string str with all characters changed to lowercase according to the current character set mapping, or NULL if str is NULL. The default character set is utf8mb4.


	eg. SELECT LOWER('QUADRATICALLY');
        -> 'quadratically'

=========================================================UPPER(str) or UCASE(str)=================================================

Returns the string str with all characters changed to uppercase according to the current character set mapping, or NULL if str is NULL. The default character set is utf8mb4.

	eg. SELECT UPPER('Hej');
        -> 'HEJ'


LOWER() (and UPPER()) are ineffective when applied to binary strings (BINARY, VARBINARY, BLOB). To perform lettercase conversion of a binary string, first convert it to a nonbinary string using a character set appropriate for the data stored in the string

mysql> SET @str = BINARY 'New York';
mysql> SELECT LOWER(@str), LOWER(CONVERT(@str USING utf8mb4));
+-------------+------------------------------------+
| LOWER(@str) | LOWER(CONVERT(@str USING utf8mb4)) |
+-------------+------------------------------------+
| New York    | new york                           |
+-------------+------------------------------------+


======================================INSERT(str, pos, len, newstr)===========================================

Returns the string str, with the substring beginning at position pos and len characters long replaced by the string newstr. Returns the original string if pos is not within the length of the string. Replaces the rest of the string from position pos if len is not within the length of the rest of the string. Returns NULL if any argument is NULL.


	eg. SELECT INSERT('Quadratic', 3, 4, 'What');
        -> 'QuWhattic'
	eg. SELECT INSERT('Quadratic', -1, 4, 'What');
        -> 'Quadratic'
	eg. SELECT INSERT('Quadratic', 3, 100, 'What');
        -> 'QuWhat'

====================================LEFT(str,int)==============================

Returns the leftmost len characters from the string str, or NULL if any argument is NULL.


	eg. SELECT LEFT('foobarbar', 5);
        -> 'fooba'


==============================RIGHT(str,int)==================================

Returns the rightmost len characters from the string str, or NULL if any argument is NULL.


	eg. SELECT RIGHT('foobarbar', 4);
        -> 'rbar'


===========================================REPEAT(str,count)==============================

Returns a string consisting of the string str repeated count times. If count is less than 1, returns an empty string. Returns NULL if str or count is NULL.


	eg. SELECT REPEAT('MySQL', 3);
        -> 'MySQLMySQLMySQL'



==========================TRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr FROM] str)===============

Returns the string str with all remstr prefixes or suffixes removed. If none of the specifiers BOTH, LEADING, or TRAILING is given, BOTH is assumed. remstr is optional and, if not specified, spaces are removed.


	eg. SELECT TRIM('  bar   ');
        -> 'bar'
	eg. SELECT TRIM(LEADING 'x' FROM 'xxxbarxxx');
        -> 'barxxx'
	eg. SELECT TRIM(BOTH 'x' FROM 'xxxbarxxx');
        -> 'bar'
	eg. SELECT TRIM(TRAILING 'xyz' FROM 'barxxyz');
        -> 'barx'






